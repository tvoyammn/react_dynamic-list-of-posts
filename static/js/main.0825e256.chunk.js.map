{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","setSelectedPostId","className","length","map","post","userId","title","type","onClick","id","BASE_URL","request","url","a","fetch","responce","json","getPostComments","postId","comments","filter","comment","addComment","name","email","body","method","headers","JSON","stringify","getAllPosts","getUserPosts","NewCommentForm","onCommentAdd","useState","setName","setEmail","setBody","onSubmit","event","preventDefault","placeholder","required","value","onChange","target","Loader","PostDetails","setPost","postComments","setPostComments","isCommentsHidden","setIsCommentsHidden","loading","setLoading","fetchPostComments","useCallback","updateComments","fetchPostDetails","useEffect","onCommentDelete","commentId","postComment","App","setPosts","users","setUsers","fetchPosts","fetchUsers","fetchUserPosts","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0825e256.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport { SelectedPostId } from '../../types/SelectedPostId';\n\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: SelectedPostId,\n  setSelectedPostId: React.Dispatch<React.SetStateAction<SelectedPostId>>\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  setSelectedPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length === 0\n      ? <h3>No posts from this user yet</h3>\n      : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  if (post.id === selectedPostId) {\n                    setSelectedPostId(null);\n                  } else {\n                    setSelectedPostId(post.id);\n                  }\n                }}\n              >\n                {post.id === selectedPostId ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  const responce = await fetch(url);\n\n  return responce.json();\n};\n","import { BASE_URL, request } from './api';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => {\n  const comments = await request(`${BASE_URL}/comments`);\n\n  return comments.filter((comment: Comment) => comment.postId === postId);\n};\n\nexport const deleteComment = (commentId: number): Promise<Response> => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Response> => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n","import { Post } from '../types/Post';\nimport { BASE_URL, request } from './api';\n\nexport const getAllPosts = async (): Promise<Post[]> => {\n  const posts = await request(`${BASE_URL}/posts`);\n\n  return posts;\n};\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return request(`${BASE_URL}/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return request(`${BASE_URL}/posts/${postId}`);\n};\n","import React, { useState } from 'react';\n\nimport './NewCommentForm.scss';\n\ntype Props = {\n  onCommentAdd: (name: string, email: string, body: string) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onCommentAdd }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearInputs = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onCommentAdd(name, email, body);\n    clearInputs();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPostId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post>();\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isCommentsHidden, setIsCommentsHidden] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  const fetchPostComments = useCallback(async () => {\n    setPostComments(await getPostComments(selectedPostId));\n  }, [selectedPostId]);\n\n  const updateComments = () => {\n    fetchPostComments();\n  };\n\n  const fetchPostDetails = useCallback(async () => {\n    setPost(await getPostDetails(selectedPostId));\n    updateComments();\n    setLoading(false);\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    setLoading(true);\n    fetchPostDetails();\n  }, [selectedPostId]);\n\n  const onCommentDelete = async (id: number) => {\n    await deleteComment(id);\n    updateComments();\n  };\n\n  const onCommentAdd = useCallback(async (name: string, email: string, body: string) => {\n    await addComment(selectedPostId, name, email, body);\n    updateComments();\n  }, [selectedPostId]);\n\n  return loading ? (\n    <Loader />\n  ) : (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {postComments.length > 0 && (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsCommentsHidden(!isCommentsHidden)}\n            >\n              {`${isCommentsHidden ? 'Show' : 'Hide'} ${postComments.length} comments`}\n            </button>\n\n            {!isCommentsHidden && (\n              <ul className=\"PostDetails__list\">\n                {postComments.map(postComment => (\n                  <li key={postComment.id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => onCommentDelete(postComment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{postComment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onCommentAdd={onCommentAdd} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\n\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { SelectedPostId } from './types/SelectedPostId';\n\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { getAllUsers } from './api/users';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<SelectedPostId>(null);\n  const [loading, setLoading] = useState(false);\n\n  const fetchPosts = useCallback(async () => {\n    setPosts(await getAllPosts());\n    setLoading(false);\n  }, []);\n\n  const fetchUsers = useCallback(async () => {\n    setUsers(await getAllUsers());\n  }, []);\n\n  const fetchUserPosts = useCallback(async (userId: number) => {\n    setPosts(await getUserPosts(userId));\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    fetchPosts();\n    fetchUsers();\n  }, []);\n\n  const onUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (event.target.value) {\n      fetchUserPosts(+event.target.value);\n    } else {\n      fetchPosts();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"user-select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"user-select\"\n            className=\"App__user-selector\"\n            onChange={onUserChange}\n          >\n            <option value=\"\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {loading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                selectedPostId={selectedPostId}\n                setSelectedPostId={setSelectedPostId}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== null && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../types/User';\nimport { BASE_URL, request } from './api';\n\nexport const getAllUsers = (): Promise<User[]> => {\n  return request(`${BASE_URL}/users`);\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}