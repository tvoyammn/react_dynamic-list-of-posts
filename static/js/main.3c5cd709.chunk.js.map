{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","api/comments.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","setSelectedPostId","className","length","map","post","userId","title","id","type","onClick","BASE_URL","request","url","fetch","then","responce","json","getAllPosts","NewCommentForm","onCommentAdd","useState","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","required","value","onChange","target","Loader","PostDetails","setPost","postComments","setPostComments","commentsHidden","setCommentsHidden","loading","setLoading","updateComments","postId","comments","filter","comment","commentsFromServer","useEffect","postFromServer","onCommentDelete","commentId","method","postComment","headers","JSON","stringify","addComment","App","setPosts","users","setUsers","postsFromServer","usersFromServer","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c5cd709.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport { SelectedPostId } from '../../types/SelectedPostId';\n\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[]\n  selectedPostId: SelectedPostId\n  setSelectedPostId: React.Dispatch<React.SetStateAction<SelectedPostId>>\n};\n\nexport const PostsList: React.FC<Props> = (\n  {\n    posts,\n    selectedPostId,\n    setSelectedPostId,\n  },\n) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length === 0\n      ? <h3>No posts from this user yet</h3>\n      : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n              {post.id === selectedPostId ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setSelectedPostId(null)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setSelectedPostId(post.id)}\n                >\n                  Open\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(url)\n    .then(responce => responce.json());\n};\n","import { Post } from '../types/Post';\nimport { BASE_URL, request } from './api';\n\nexport const getAllPosts = (): Promise<Post[]> => {\n  return request(`${BASE_URL}/posts`);\n};\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return request(`${BASE_URL}/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return request(`${BASE_URL}/posts/${postId}`);\n};\n","import React, { useState } from 'react';\n\nimport './NewCommentForm.scss';\n\ntype Props = {\n  onCommentAdd: (name: string, email: string, body: string) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onCommentAdd }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearInputs = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onCommentAdd(name, email, body);\n    clearInputs();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPostId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post>();\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [commentsHidden, setCommentsHidden] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  const updateComments = () => {\n    getPostComments(selectedPostId)\n      .then(commentsFromServer => setPostComments(commentsFromServer));\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getPostDetails(selectedPostId)\n      .then(postFromServer => {\n        setPost(postFromServer);\n      })\n      .then(() => {\n        updateComments();\n        setLoading(false);\n      });\n  }, [selectedPostId]);\n\n  const onCommentDelete = (id: number) => {\n    deleteComment(id)\n      .then(() => updateComments());\n  };\n\n  const onCommentAdd = (name: string, email: string, body: string) => {\n    addComment(selectedPostId, name, email, body)\n      .then(() => updateComments());\n  };\n\n  return loading ? (\n    <Loader />\n  ) : (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {postComments.length > 0 && (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setCommentsHidden(!commentsHidden)}\n            >\n              {`${commentsHidden ? 'Show' : 'Hide'} ${postComments.length} comments`}\n            </button>\n\n            {!commentsHidden && (\n              <ul className=\"PostDetails__list\">\n                {postComments.map(postComment => (\n                  <li key={postComment.id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => onCommentDelete(postComment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{postComment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onCommentAdd={onCommentAdd} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL, request } from './api';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`${BASE_URL}/comments`)\n    .then(comments => comments.filter((comment: Comment) => comment.postId === postId));\n};\n\nexport const deleteComment = (commentId: number): Promise<Response> => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Response> => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\n\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { SelectedPostId } from './types/SelectedPostId';\n\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { getAllUsers } from './api/users';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<SelectedPostId>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getAllPosts()\n      .then(postsFromServer => setPosts(postsFromServer))\n      .then(() => setLoading(false));\n\n    getAllUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const onUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (event.target.value) {\n      getUserPosts(+event.target.value)\n        .then(postsFromServer => setPosts(postsFromServer));\n    } else {\n      getAllPosts()\n        .then(postsFromServer => setPosts(postsFromServer));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"user-select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"user-select\"\n            className=\"App__user-selector\"\n            onChange={onUserChange}\n          >\n            <option value=\"\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {loading ? (\n            <Loader />\n          ) : (\n            <PostsList\n              posts={posts}\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== null && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../types/User';\nimport { BASE_URL, request } from './api';\n\nexport const getAllUsers = (): Promise<User[]> => {\n  return request(`${BASE_URL}/users`);\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}